{"version":3,"sources":["components/Button.js","components/Level.js","components/TargetTime.js","components/TimeIndicator.js","components/Tries.js","components/GameOver.js","components/TimerApp.js","serviceWorker.js","index.js"],"names":["Button","_ref","handleMouseDown","handleMouseUp","isGameOver","react_default","a","createElement","className","onMouseDown","onMouseUp","disabled","Level","level","TargetTime","targetTime","toFixed","TimeIndicator","timeHeld","timeDifference","isPressed","gameStarted","Tries","tries","GameOver","reset","onClick","TimerApp","_useState","useState","_useState2","Object","slicedToArray","setLevel","_useState3","_useState4","setTargetTime","_useState5","_useState6","setIsPressed","whenPressed","useRef","_useState7","_useState8","setGameStarted","_useState9","_useState10","gameOver","setGameOver","_useSpring","useSpring","opacity","_useSpring2","setOpacity","components_Level","components_TargetTime","components_Button","current","Date","now","whenReleased","Math","abs","round","console","log","components_TimeIndicator","components_Tries","components_GameOver","Boolean","window","location","hostname","match","ReactDOM","render","components_TimerApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb820971.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Button.css';\n\nconst Button = ({ handleMouseDown, handleMouseUp, isGameOver }) => {\n  return (\n    <div className=\"Button\">\n      <button\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp} \n        disabled={isGameOver}\n      >\n      </button>\n      <div>Hold the button down for the target length of time</div>\n    </div>\n  );\n}\n\nexport default Button;","import React from 'react';\nimport '../styles/Level.css';\n\nconst Level = ({ level }) => {\n  return (\n    <div className=\"Level\"> \n      <h3>Level: {level}</h3>\n    </div>\n  );\n}\n\nexport default Level;","import React from \"react\";\nimport '../styles/TargetTime.css';\n\nconst TargetTime = ({ targetTime }) => {\n  return (\n    <div className=\"TargetTime\">\n      <h1 className=\"TargetTime__title\">Target Time <br />(In Seconds)</h1>\n      <h1 className=\"TargetTime__time\">{targetTime.toFixed(\"1\")}</h1>\n    </div>\n  );\n};\n\nexport default TargetTime;\n","import React from 'react';\nimport '../styles/TimeIndicator.css'\n\nconst TimeIndicator = ({ timeHeld, timeDifference, isPressed, gameStarted }) => {  \n\n  return (\n    <div className=\"TimeIndicator\">\n      <h2>Your Time: {(!isPressed && gameStarted) && timeHeld}</h2>\n      <h2>Difference: {(!isPressed && gameStarted) && timeDifference}</h2>\n    </div>\n  );\n}\n\nexport default TimeIndicator;","import React from 'react';\nimport '../styles/Tries.css'\n\nconst Tries = ({ tries }) => {\n  return (\n    <div className=\"Tries\">\n      <h3>Tries Left: {tries}</h3>\n    </div>\n  );\n}\n\nexport default Tries;","import React from \"react\";\nimport '../styles/GameOver.css';\n\nconst GameOver = ({ reset }) => {\n  return (\n    <div className=\"GameOver\">\n      <h1>Game Over!</h1>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React, { useRef, useState } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport Button from \"./Button\";\nimport Level from \"./Level\";\nimport TargetTime from \"./TargetTime\";\nimport TimeIndicator from \"./TimeIndicator\";\nimport Tries from \"./Tries\";\nimport GameOver from \"./GameOver\";\nimport '../styles/TimerApp.css';\n\nconst TimerApp = () => {\n  const [level, setLevel] = useState(1);\n  const [targetTime, setTargetTime] = useState(0.2);\n  const [isPressed, setIsPressed] = useState(false);\n  const whenPressed = useRef(null);\n  const tries = useRef(3);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const timeHeld = useRef(null); // make it a ref instead of just a variable\n  const timeDifference = useRef(null); // make it a ref instead of just a variable\n\n  //react-spring\n  const [opacity, setOpacity] = useSpring(() => ({ opacity: 0 }));\n\n  const handleMouseDown = () => {\n    !gameStarted && setGameStarted(true); //initialize game on the first click\n    setIsPressed(true);\n    whenPressed.current = Date.now();\n  };\n\n  const handleMouseUp = () => {\n    setIsPressed(false);\n    const whenReleased = Date.now();\n\n    timeHeld.current = (whenReleased - whenPressed.current) / 1000;\n    timeDifference.current = Math.abs(targetTime - timeHeld.current);\n    timeDifference.current = Math.round(1000 * timeDifference.current) / 1000; //rounded\n\n    console.log(timeHeld.current);\n    console.log(timeDifference.current);\n\n    if (timeDifference.current <= 0.1) {\n      setLevel(level + 1);\n      setTargetTime(targetTime + 0.2);\n    } else if (timeDifference.current > 0.1 && tries.current >= 1) {\n      //react spring set method\n      setOpacity({ opacity: 0 });\n\n      tries.current--;\n      // consider using ref for tries as well to get rid of this weird tries === 1 and use tries.current === 0\n      if (tries.current === 0) {\n        setGameOver(true);\n      }\n    }\n  };\n\n  const reset = () => {\n    setLevel(1);\n    setTargetTime(0.2);\n    tries.current = 3;\n    setGameStarted(false);\n    setGameOver(false);\n    timeHeld.current = null;\n  };\n\n  return (\n    <div className=\"TimerApp\">\n      <Level level={level} />\n      <TargetTime targetTime={targetTime} />\n      <Button\n        handleMouseDown={handleMouseDown}\n        handleMouseUp={handleMouseUp}\n        isGameOver={gameOver}\n      />\n      <TimeIndicator\n        timeHeld={timeHeld.current}\n        timeDifference={timeDifference.current}\n        isPressed={isPressed}\n        gameStarted={gameStarted}\n      />\n      {/* <animated.h1\n        className=\"ex\"\n        style={{\n          opacity: opacity.opacity.interpolate({\n            range: [0, 0.5, 1],\n            output: [0, 1, 0]\n          })\n        }}\n      >\n        x\n      </animated.h1> */}\n      <Tries tries={tries.current} />\n      {gameOver && <GameOver reset={reset} />}\n    </div>\n  );\n};\n\nexport default TimerApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TimerApp from './components/TimerApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TimerApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}